#!/usr/bin/env bash

set -eo pipefail

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly build_dir="${1}"
readonly cache_dir="${2}"
readonly env_dir="${3}"

readonly base_dir="$( cd -P "$( dirname "$0" )" && pwd )"
readonly buildpack_dir="$( readlink -f "${base_dir}/.." )"


readonly url="https://cran.r-project.org/src/base/R-4/R-4.0.0.tar.gz"



# ----
# Install gfortran to compile R

# Use Apt buildpack to install gfortran

cat <<EOF >"${build_dir}/Aptfile"
gfortran
EOF

apt_deps_buildpack_dir=$(mktemp apt_buildpack_XXXX)
rm "${apt_deps_buildpack_dir}"

readonly apt_buildpack_url="https://github.com/Scalingo/apt-buildpack.git"
git clone --depth=1 "${apt_buildpack_url}" "$apt_deps_buildpack_dir"

"${apt_deps_buildpack_dir}/bin/compile" \
    "${build_dir}" "${cache_dir}" "${env_dir}"


# Check if the apt-buildpack left behind an environment for
# subsequent ones:
#
# FIXME: export file should be in ${build_dir}, not in the temp apt dir
# but this is where the apt-buildpack puts it :(
#
# rm -r "$apt_deps_buildpack_dir"

if [ -e "${build_dir}/${apt_deps_buildpack_dir}/export" ]; then
    source "${build_dir}/${apt_deps_buildpack_dir}/export"
fi

#export R_HOME="/tmp/cache/R-4.0.0"

#R_HOME="${build_dir}/R-4.0.0/lib"
#export R_HOME

PATH="\$HOME/.apt/bin/x86_64-linux-gnu-gfortran:${PATH}"
export PATH

printenv

# ----
# Download and compile R

curl -L "${url}" --output "${cache_dir}/R-4.0.0.tar.gz"

tar -xvzf "${cache_dir}/R-4.0.0.tar.gz" --directory "${cache_dir}"

pushd "${cache_dir}/R-4.0.0"

# R documentation states that Debian-based systems may need to add
# LIBnn=lib but it doesn't seem to bring better results.
./configure LIBnn=lib \
            --prefix="${build_dir}/R-4.0.0" \
            --libdir="${build_dir}/R-4.0.0/lib" \
            --enable-java=no \
            --with-recommended-packages=no

make
make install

popd

ln -sfn "${build_dir}/R-4.0.0" "${build_dir}/R"

export PATH="${build_dir}/R/bin:${PATH}"

echo "Done."
